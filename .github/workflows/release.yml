name: Release

on:
  workflow_run:
    workflows: ["Security Checks"]
    types:
      - completed
    branches:
      - main
  # Also trigger on tags for manual releases
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write

jobs:
  # Check if we should proceed with release
  check-trigger:
    runs-on: ubuntu-24.04
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Check release conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            # Direct tag push
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # Security workflow completed
            if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
              # Check if this was triggered by a tag
              if [[ "${{ github.event.workflow_run.head_branch }}" == refs/tags/v* ]]; then
                echo "should-release=true" >> $GITHUB_OUTPUT
                echo "version=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_OUTPUT
              else
                echo "should-release=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "Security checks failed, aborting release"
              echo "should-release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

  # Build binaries for multiple platforms
  build-binaries:
    needs: check-trigger
    if: needs.check-trigger.outputs.should-release == 'true'
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache-dependency-path: "./go.mod"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p bin
          go build -v \
            -ldflags "-w -s -X=github.com/Searge/k8s-controller/cmd.Version=${{ needs.check-trigger.outputs.version }}" \
            -o bin/kc-${{ matrix.suffix }} \
            main.go

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: kc-${{ matrix.suffix }}
          path: bin/kc-${{ matrix.suffix }}

  # Build and push Docker images
  build-docker:
    needs: check-trigger
    if: needs.check-trigger.outputs.should-release == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.check-trigger.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub Release with all artifacts
  create-release:
    runs-on: ubuntu-24.04
    needs: [check-trigger, build-binaries, build-docker]
    if: needs.check-trigger.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4

      # Download all binary artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # Prepare release files
      - name: Prepare release files
        run: |
          mkdir -p release-files
          find ./artifacts -name "kc-*" -type f -exec cp {} release-files/ \;
          ls -la release-files/

      # Extract changelog
      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION_NUMBER=$(echo "${{ needs.check-trigger.outputs.version }}" | sed 's/^v//')
          if [ -f "CHANGELOG.md" ]; then
            awk '/^## \['"$VERSION_NUMBER"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > current_changelog.md
            if [ -s current_changelog.md ]; then
              echo "changelog<<EOF" >> $GITHUB_OUTPUT
              cat current_changelog.md >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "changelog=No changelog found for version $VERSION_NUMBER" >> $GITHUB_OUTPUT
            fi
          else
            echo "changelog=No CHANGELOG.md file found" >> $GITHUB_OUTPUT
          fi

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-trigger.outputs.version }}
          name: Release ${{ needs.check-trigger.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}

            ## ðŸ“¦ Downloads

            **Docker Image:**
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ needs.check-trigger.outputs.version }}
            ```

            **Binaries:**
            - Linux (amd64): `kc-linux-amd64`
            - Linux (arm64): `kc-linux-arm64`
            - macOS (Intel): `kc-darwin-amd64`
            - macOS (Apple Silicon): `kc-darwin-arm64`
            - Windows (amd64): `kc-windows-amd64.exe`
          draft: false
          prerelease: ${{ contains(needs.check-trigger.outputs.version, '-') }}
          files: |
            release-files/*
          generate_release_notes: true
