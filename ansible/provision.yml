---
- name: "Install K8s on Fedora Core OS"
  hosts: [localhost]
  connection: local
  become: true
  vars:
    # --- Component Versions ---
    k8s_version: "1.30.0"
    containerd_version: "2.1.2"
    runc_version: "1.2.6"
    cni_version: "1.6.2"

    # --- System Configuration ---
    arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"
    pod_network_cidr: "10.244.0.0/16"
    service_cidr: "10.96.0.0/12"

    # --- Paths ---
    bin_path: "/usr/local/bin"
    cni_path: "/opt/cni/bin"
    cni_net_dir: "/etc/cni/net.d"
    config_path: "/etc/kubernetes"
    pki_path: "/etc/kubernetes/pki"
    etcd_data_path: "/var/lib/etcd"
    kubelet_data_path: "/var/lib/kubelet"
    kubernetes_log_path: "/var/log/kubernetes"
    wip_dir: "/var/tmp/k8s_wip"

  tasks:
    - name: "Download and install necessary packages"
      tags: ["setup"]
      block:
        - name: "Setup | Create necessary directories"
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
          loop:
            - "{{ bin_path }}"
            - "{{ cni_path }}"
            - "{{ cni_net_dir }}"
            - "{{ config_path }}"
            - "{{ pki_path }}"
            - "{{ etcd_data_path }}"
            - "{{ kubelet_data_path }}"
            - "{{ kubernetes_log_path }}"
            - "{{ wip_dir }}"

        - name: "Setup | Check architecture"
          ansible.builtin.debug:
            msg: "Detected architecture: {{ arch }}"

        - name: "Install | Download and unpack Kubebuilder tools (etcd, kube-apiserver)"
          ansible.builtin.unarchive:
            src: "https://storage.googleapis.com/kubebuilder-tools/kubebuilder-tools-{{ k8s_version }}-linux-{{ arch }}.tar.gz"
            dest: "{{ wip_dir }}"
            remote_src: true
            creates: "{{ wip_dir }}/kubebuilder/bin/kube-apiserver"

        - name: "Install | Move Kubebuilder binaries to {{ bin_path }}"
          ansible.builtin.copy:
            src: "{{ wip_dir }}/kubebuilder/bin/{{ item }}"
            dest: "{{ bin_path }}/{{ item }}"
            mode: "0755"
            remote_src: true
          loop:
            - etcd
            - kube-apiserver
            - kubectl

        - name: "Install | Download other Kubernetes components"
          ansible.builtin.get_url:
            url: "https://dl.k8s.io/v{{ k8s_version }}/bin/linux/{{ arch }}/{{ item }}"
            dest: "{{ bin_path }}/{{ item }}"
            mode: "0755"
          loop:
            - kubelet
            - kube-controller-manager
            - kube-scheduler

        - name: "Install | Download and unpack Containerd to a temp directory"
          ansible.builtin.unarchive:
            src: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-{{ arch }}.tar.gz"
            dest: "{{ wip_dir }}"
            remote_src: true
            creates: "{{ wip_dir }}/bin/containerd"

        - name: "Install | Move Containerd binaries to {{ bin_path }}"
          ansible.builtin.copy:
            src: "{{ wip_dir }}/bin/{{ item }}"
            dest: "{{ bin_path }}/{{ item }}"
            mode: "0755"
            remote_src: true
          loop:
            - containerd
            - containerd-shim-runc-v2
            - containerd-stress
            - ctr

        - name: "Install | Download and install Runc"
          ansible.builtin.get_url:
            url: "https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.{{ arch }}"
            dest: "{{ bin_path }}/runc"
            mode: "0755"

        - name: "Install | Download and install CNI plugins"
          ansible.builtin.unarchive:
            src: "https://github.com/containernetworking/plugins/releases/download/v{{ cni_version }}/cni-plugins-linux-{{ arch }}-v{{ cni_version }}.tgz"
            dest: "{{ cni_path }}"
            remote_src: true
            creates: "{{ cni_path }}/bridge"

        - name: "Verify | Check installed binaries"
          ansible.builtin.command: "ls -l {{ bin_path }}"
          register: ls_result
          changed_when: false

        - name: "Verify | Display installed binaries"
          ansible.builtin.debug:
            var: ls_result.stdout_lines

    - name: "Generate Certificates, Tokens, and Kubeconfigs"
      tags: ["certs"]
      block:
        # -----------------------------------------------------------------
        # CA Setup
        # -----------------------------------------------------------------
        - name: "PKI | CA | Create a private key for our new CA"
          community.crypto.openssl_privatekey:
            path: "{{ pki_path }}/ca.key"

        - name: "PKI | CA | Create a CSR for our new CA"
          community.crypto.openssl_csr:
            path: "{{ pki_path }}/ca.csr"
            privatekey_path: "{{ pki_path }}/ca.key"
            common_name: "kubernetes-ca"

        - name: "PKI | CA | Create a self-signed CA certificate from the CSR"
          community.crypto.x509_certificate:
            path: "{{ pki_path }}/ca.crt"
            csr_path: "{{ pki_path }}/ca.csr"
            privatekey_path: "{{ pki_path }}/ca.key"
            provider: selfsigned

        # -----------------------------------------------------------------
        # API Server Certificate Setup
        # -----------------------------------------------------------------
        - name: "PKI | API Server | Create a private key for the API server"
          community.crypto.openssl_privatekey:
            path: "{{ pki_path }}/apiserver.key"

        - name: "PKI | API Server | Create a CSR for the API server with SANs"
          community.crypto.openssl_csr:
            path: "{{ pki_path }}/apiserver.csr"
            privatekey_path: "{{ pki_path }}/apiserver.key"
            common_name: "kube-apiserver"
            subject_alt_name:
              - "IP:127.0.0.1"
              - "DNS:localhost"
              - "DNS:kubernetes"
              - "DNS:kubernetes.default"
              - "DNS:kubernetes.default.svc"
              - "DNS:kubernetes.default.svc.cluster.local"

        - name: "PKI | API Server | Create a certificate for the API server signed by our CA"
          community.crypto.x509_certificate:
            path: "{{ pki_path }}/apiserver.crt"
            csr_path: "{{ pki_path }}/apiserver.csr"
            provider: ownca
            ownca_path: "{{ pki_path }}/ca.crt"
            ownca_privatekey_path: "{{ pki_path }}/ca.key"

        # -----------------------------------------------------------------
        # Service Account Keys
        # -----------------------------------------------------------------
        - name: "PKI | SA | Create Service Account private key"
          community.crypto.openssl_privatekey:
            path: "{{ pki_path }}/sa.key"

        - name: "PKI | SA | Create Service Account public key"
          community.crypto.openssl_publickey:
            path: "{{ pki_path }}/sa.pub"
            privatekey_path: "{{ pki_path }}/sa.key"
            format: PEM

        # -----------------------------------------------------------------
        # Authentication Token
        # -----------------------------------------------------------------
        - name: "Auth | Generate a secure random token for the admin user"
          ansible.builtin.set_fact:
            admin_token: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
          run_once: true

        - name: "Auth | Display the generated admin token for debugging"
          ansible.builtin.debug:
            msg: "Generated admin token is --- {{ admin_token }} ---"

        - name: "Auth | Create static token file with the generated token"
          ansible.builtin.copy:
            dest: "{{ config_path }}/token.csv"
            content: "{{ admin_token }},admin,admin,system:masters"
            mode: "0600"

        # -----------------------------------------------------------------
        # Kubeconfigs
        # -----------------------------------------------------------------
        - name: "Kubeconfigs | Generate kubeconfigs for control plane components"
          ansible.builtin.template:
            src: component.kubeconfig.j2
            dest: "{{ config_path }}/{{ item }}.kubeconfig"
            mode: "0600"
          loop:
            - kube-controller-manager
            - kube-scheduler
          vars:
            component_name: "system:{{ item }}"

    - name: "Configure and run Core Control Plane services"
      tags: ["control-plane-core"]
      block:
        - name: "Services | Create etcd systemd service file"
          ansible.builtin.template:
            src: etcd.service.j2
            dest: /etc/systemd/system/etcd.service
            mode: '0644'

        - name: "Services | Create kube-apiserver systemd service file"
          ansible.builtin.template:
            src: kube-apiserver.service.j2
            dest: /etc/systemd/system/kube-apiserver.service
            mode: '0644'

        - name: "Services | Reload systemd to apply changes"
          ansible.builtin.systemd_service:
            daemon_reload: true

        - name: "Services | Enable and start etcd"
          ansible.builtin.systemd_service:
            name: etcd
            state: started
            enabled: true

        - name: "Services | Wait for etcd to be healthy"
          ansible.builtin.uri:
            url: http://127.0.0.1:2379/health
            status_code: 200
          register: etcd_health
          until: etcd_health.status == 200
          retries: 10
          delay: 5

        - name: "Services | Enable and start kube-apiserver"
          ansible.builtin.systemd_service:
            name: kube-apiserver
            state: started
            enabled: true

        - name: "Services | Read token file content using slurp (respects become)"
          ansible.builtin.slurp:
            src: "{{ config_path }}/token.csv"
          register: token_file_content

        - name: "Services | Set token fact from slurped content"
          ansible.builtin.set_fact:
            api_bearer_token: "{{ (token_file_content.content | b64decode).split(',')[0] }}"

        - name: "Services | Wait for kube-apiserver to be ready"
          ansible.builtin.uri:
            url: https://127.0.0.1:6443/livez
            method: GET
            validate_certs: false
            headers:
              Authorization: "Bearer {{ api_bearer_token }}"
            status_code: 200
          register: apiserver_health
          until: apiserver_health.status == 200
          retries: 12
          delay: 5
