---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

env:
  FORCE_COLOR: 1
  ANSIBLE_CONFIG: "{{.USER_WORKING_DIR}}/ansible/ansible.cfg"
  APP_DIR: "/srv/app"
  VM_NAME: "dev"
  APP_NAME: "k8s-controller"
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  LOCALBIN: "{{.USER_WORKING_DIR}}/bin"
  # Golang env
  CGO_ENABLED: "0"
  GOOS: "linux"
  GOARCH: "amd64"

vars:
  BUILD_FLAGS: >-
   -v -o {{.LOCALBIN}}/{{.APP_NAME}} -ldflags
   "-X=github.com/Searge/{{.APP_NAME}}/cmd.appVersion={{.VERSION}}"
  ENVTEST_VERSION: "release-0.19"

tasks:
  default:
    desc: "Show available tasks"
    aliases:
      - l
      - a
    cmds:
      - task --list-all
    silent: true

  ######################################################################
  # GO BUILD AND DEVELOPMENT COMMANDS
  ######################################################################
  version:
    cmds:
      - echo {{.VERSION}}

  setup:
    desc: "Create bin directory and install dependencies"
    cmds:
      - mkdir -p {{.LOCALBIN}}
    silent: true

  tidy:
    desc: Run `go mod tidy` on the project.
    cmds:
      - go mod tidy

  fmt:
    desc: Format the codebase.
    cmds:
      - go fmt ./...

  test:
    desc: Run tests across the project.
    cmds:
      - go test -v ./...

  lint:
    desc: Run `golint` on the project.
    cmds:
      - go vet ./...

  build:
    desc: "Build the Go application"
    deps: [setup]
    cmds:
      - go build {{.BUILD_FLAGS}} main.go
    generates:
      - "{{.APP_NAME}}"

  run:
    desc: "Run the Go application"
    cmds:
      - go run main.go {{.CLI_ARGS}}

  clean:
    desc: "Clean build artifacts"
    cmds:
      - rm -f {{.APP_NAME}}
      - rm -f coverage.out coverage.xml report.xml
      - rm -rf {{.LOCALBIN}}

  ######################################################################
  # TESTING COMMANDS
  ######################################################################
  # install-test-tools:
  #   desc: "Install testing tools"
  #   deps: [setup]
  #   cmds:
  #     - |
  #       if [ ! -f "{{.LOCALBIN}}/setup-envtest-{{.ENVTEST_VERSION}}" ]; then
  #         echo "Downloading setup-envtest@{{.ENVTEST_VERSION}}"
  #         GOBIN={{.LOCALBIN}} go install sigs.k8s.io/controller-runtime/tools/setup-envtest@{{.ENVTEST_VERSION}}
  #         mv {{.LOCALBIN}}/setup-envtest {{.LOCALBIN}}/setup-envtest-{{.ENVTEST_VERSION}}
  #       fi
  #       ln -sf {{.LOCALBIN}}/setup-envtest-{{.ENVTEST_VERSION}} {{.LOCALBIN}}/setup-envtest
  #     - go install gotest.tools/gotestsum@latest
  #   generates:
  #     - "{{.LOCALBIN}}/setup-envtest"
  #   status:
  #     - test -f {{.LOCALBIN}}/setup-envtest-{{.ENVTEST_VERSION}}

  # test:
  #   desc: "Run tests with gotestsum"
  #   deps: [install-test-tools]
  #   env:
  #     KUBEBUILDER_ASSETS:
  #       sh: "{{.LOCALBIN}}/setup-envtest use --bin-dir {{.LOCALBIN}} -p path"
  #   cmds:
  #     - gotestsum --junitfile report.xml --format testname ./... {{.CLI_ARGS}}

  # test-coverage:
  #   desc: "Run tests with coverage report"
  #   deps: [install-test-tools]
  #   env:
  #     KUBEBUILDER_ASSETS:
  #       sh: "{{.LOCALBIN}}/setup-envtest use --bin-dir {{.LOCALBIN}} -p path"
  #   cmds:
  #     - go install github.com/boumenot/gocover-cobertura@latest
  #     - go test -coverprofile=coverage.out -covermode=count ./...
  #     - go tool cover -func=coverage.out
  #     - gocover-cobertura < coverage.out > coverage.xml
  #   generates:
  #     - coverage.out
  #     - coverage.xml

  # test-watch:
  #   desc: "Run tests in watch mode"
  #   deps: [install-test-tools]
  #   env:
  #     KUBEBUILDER_ASSETS:
  #       sh: "{{.LOCALBIN}}/setup-envtest use --bin-dir {{.LOCALBIN}} -p path"
  #   cmds:
  #     - gotestsum --watch --format testname ./...

  ######################################################################
  # DOCKER COMMANDS
  ######################################################################
  docker-build:
    desc: "Build Docker image"
    cmds:
      - docker build --build-arg VERSION={{.VERSION}} -t {{.APP_NAME}}:latest .
      - docker build --build-arg VERSION={{.VERSION}} -t {{.APP_NAME}}:{{.VERSION}} .

  docker-run:
    desc: "Run Docker container"
    cmds:
      - docker run --rm -it {{.APP_NAME}}:latest {{.CLI_ARGS}}

  ######################################################################
  # DEVELOPMENT WORKFLOW
  ######################################################################
  dev:
    desc: "Run development workflow (format, lint, test, build)"
    cmds:
      - task: format
      - task: lint
      - task: test
      - task: build

  ci:
    desc: "Run CI workflow (format check, lint, test with coverage)"
    cmds:
      - task: format
      - task: lint
      - task: test-coverage

  ######################################################################
  # PODMAN COMMANDS
  ######################################################################
  init:
    desc: "Init Podman machine"
    dir: "{{.USER_WORKING_DIR}}"
    cmds: ["./scripts/init.sh"]

  ssh:
    desc: "SSH into the Podman machine"
    summary: |
      Pass commands after `--`
      to be executed on the remote machine.

      Example:
        task ssh -- 'ls -lha ~'

      {{.CLI_ARGS}} captures all arguments passed to the task after '--'.
      If no arguments are given, it's empty, and 'podman machine ssh' starts an interactive session.
      If arguments are given, they are appended to the command and executed on the remote machine.
    cmds:
      - podman machine ssh {{.VM_NAME}} {{.CLI_ARGS}}

  reboot:
    desc: "Reboot Podman machine"
    cmds:
      - podman machine stop {{.VM_NAME}}
      - sleep 2
      - podman machine start {{.VM_NAME}}

  rm:
    desc: "Remove Podman machine"
    cmds: ["podman machine rm {{.VM_NAME}} -f"]

  ######################################################################
  # ANSIBLE PROVISIONING
  ######################################################################
  provision:
    dir: "{{.USER_WORKING_DIR}}/ansible"
    desc: "Run ansible-playbook"
    summary: |
      Task for running on remote or localy

      Example:
        task provision # If you in the podman machine
        task ssh -- 'cd /srv/app && go-task provision' # To run from the host machine
    cmds:
      - ansible-playbook provision.yml {{.CLI_ARGS}}
